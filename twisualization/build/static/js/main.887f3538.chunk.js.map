{"version":3,"sources":["components/TimestepDropDown.js","components/TweetviewDropDown.js","components/WordCloud.js","components/TimeSlider.js","components/BarChart.js","components/PieChart.js","components/TweetView.js","components/WorldMap.js","App.js","hooks/useDebounce.js","reportWebVitals.js","index.js"],"names":["TimestepDropDown","timestepSelected","svgRef","useRef","useEffect","d3","remove","current","append","attr","on","selection","this","property","style","selectAll","data","enter","text","d","className","ref","height","width","TweetviewDropDown","tweetAmountShown","WordCloud","tweetData","sentimentSelected","sentimentTag","SELECTED_SENTIMENT","undefined","toString","toUpperCase","wordHue","strA","arrayA","kwordArr","dataArray","dataArray2","length","countJson","Object","keys","i","currentSentiment","Sentiment_Type","Keywords","split","concat","getSentKwordArr","sort","currentWord","cnt","word","push","getCounts","limit","sortOrder","substr","a","b","dynamicSort","limitWords","options","luminosity","hue","minSize","maxSize","shuffle","tags","colorOptions","justifyContent","alignItems","textAlign","fontFamily","fontWeight","fontStyle","TimeSlider","svg","timeSelected","range","SELECTED_TIMESTEP","allRangeValues","margin","cutoff_char","k","j","rangeValues","slider","classed","xScale","domain","clamp","track","tickValues","tickFormat","node","appendChild","cloneNode","substring","handle","stroke_width","dragged","value","timeSliderValue","x","invert","index","string_timestep","tweets","SELECTED_TIME","rawdata","Date","fetchData","event","dragHandler","select","BarChart","time_units","Map","timeSelected_complete","days","minute","current_timestamp","has","current_tweetcount","get","set","size","current_timeslot","barchart_height","bar_width","max_tweets","min_tweets","tweetArray","Array","from","values","bar_height","Number","isNaN","fontsize","line_step","partition","Math","ceil","line_height","exit","Fragment","PieChart","isSentimentSelected","didMount","pie","arc","innerRadius","outerRadius","positive_counter","neutral_counter","negative_counter","tweetCount","arcTween","_current","t","label","color","fractional","round","canvas","top_text","addTextAtTop","setupContainersOnMount","arcs","transition","duration","attrTween","each","drawPieChart","center_text","center_fontsize","addTextInCenter","TweetView","tagSelected","divRef","displayTweetAmount","SELECTED_TAG","currentSentimentTweets","currentTweet","currentSentimentTweets2","tweetview_group","preview_fontsize","preview_height","preview_width","container_height","container_width","console","log","tweetview","preview_fav_fontsize","borderColor","tweet","url","Screen_Name","Tweet_ID","window","open","Full_Name","Verified","string","Tweet_Text","call","wrap","Retweets","Favorites","words","reverse","line","lineNumber","y","parseInt","tspan","dy","pop","join","getComputedTextLength","WorldMap","projection","colorScale","pathGenerator","countryData","currentCountry","Country","countryArray","currentTweetcount","scale","translate","type","then","countries","feature","objects","features","mappingdata","id","country","gotoTwitter","gotoIncident","App","useState","time","setTime","setTweets","timestep","setTimestep","sentiment","setSentiment","tweetsShown","setTweetsShown","debouncedTime","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","stylesheet","onClick","borderStyle","borderWidth","borderRadius","backgroundColor","padding","display","flexDirection","marginLeft","marginRight","paddingTop","paddingBottom","paddingLeft","overflowY","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.887f3538.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst TimestepDropDown = ({timestepSelected}) => {\r\n\r\n    const svgRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        d3.selectAll('.timestep_selection').remove();\r\n\r\n        var svg = d3.select(svgRef.current)\r\n            .append('select')\r\n            .attr('class', 'timestep_selection')\r\n            .on('change', function () {\r\n                var selection = d3.select(this).property(\"value\");\r\n                timestepSelected(selection);\r\n            })\r\n            .style('cursor', 'pointer');\r\n\r\n\r\n        var data = [\"days\", \"hours\", \"minutes\"];\r\n        var dropdown = svg.selectAll(\"option\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"option\")\r\n            .text(function (d) {\r\n                return d;\r\n            })\r\n            .attr(\"value\", function (d) {\r\n                return d;\r\n            })\r\n            .property(\"selected\", function(d){ return d === \"days\"; });\r\n\r\n    }, []);\r\n    return <div className=\"TimestepDropDown\" ref={svgRef} height={200} width={200}/>;\r\n}\r\n\r\nexport default TimestepDropDown;","import React, {useEffect, useRef, useState} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst TweetviewDropDown = ({tweetAmountShown}) => {\r\n\r\n    const svgRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        d3.selectAll('.tweetview_selection').remove();\r\n\r\n        var svg = d3.select(svgRef.current)\r\n            .append('select')\r\n            .attr('class', 'tweetview_selection')\r\n            .on('change', function () {\r\n                var selection = d3.select(this).property(\"value\");\r\n                tweetAmountShown(selection);\r\n            })\r\n            .style('cursor', 'pointer');\r\n\r\n\r\n        var data = [10, 50, 100];\r\n        var dropdown = svg.selectAll(\"option\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"option\")\r\n            .text(function (d) {\r\n                return d;\r\n            })\r\n            .attr(\"value\", function (d) {\r\n                return d;\r\n            })\r\n            .property(\"selected\", function(d){ return d === 10; });\r\n\r\n    }, []);\r\n    return <div className=\"TweetviewDropDown\" ref={svgRef} height={200} width={200}/>;\r\n}\r\n\r\nexport default TweetviewDropDown;","//on twisualization level npm install react-tagcloud\r\n\r\nimport React, {useEffect, useRef} from 'react';\r\nimport {TagCloud} from 'react-tagcloud';\r\nimport * as d3 from 'd3';\r\n\r\nconst WordCloud = ({tweetData, sentimentSelected, sentimentTag}) => {\r\n\r\n    var SELECTED_SENTIMENT = \"\";\r\n    if (sentimentSelected !== undefined) {\r\n        SELECTED_SENTIMENT = sentimentSelected.toString().toUpperCase();\r\n    }\r\n\r\n    var sentimentTag = \"\";\r\n\r\n    //const svgRef = useRef();\r\n    //const didMount = useRef(false);\r\n    //useEffect(() => {\r\n\r\n    let wordHue = '';\r\n    let strA = '';          // helper string\r\n    let arrayA = [];        // helper array\r\n    let kwordArr = [];      // list of all keywords in selected tweet range\r\n    const dataArray = [];   // contains all unique keywords and counts\r\n    const dataArray2 = [];  // contains a limited number of keywords and counts\r\n\r\n    // builds array of keywords for selected tweets\r\n    if (tweetData.length) {\r\n        function getSentKwordArr() {\r\n            let countJson = Object.keys(tweetData).length;  // number of json objects in scope\r\n            for (let i = 0; i < countJson; i++) {\r\n                var currentSentiment = tweetData[i].Sentiment_Type;\r\n                if (SELECTED_SENTIMENT === \"\") {\r\n                    //window.alert(SELECTED_SENTIMENT + ' ' + i + ' ' + tweetData[i].Tweet_ID);\r\n                    if (tweetData[i].Keywords) {\r\n                        strA = tweetData[i].Keywords;\r\n                        arrayA = strA.split(\",\");\r\n                        kwordArr = kwordArr.concat(arrayA);\r\n                    }\r\n                } else if (currentSentiment === SELECTED_SENTIMENT) {\r\n                    //window.alert(SELECTED_SENTIMENT + ' ' + i + ' ' + tweetData[i].Tweet_ID);\r\n                    if (tweetData[i].Keywords) {\r\n                        strA = tweetData[i].Keywords;\r\n                        arrayA = strA.split(\",\");\r\n                        kwordArr = kwordArr.concat(arrayA);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        getSentKwordArr()\r\n\r\n\r\n        // gets the unique keywords and their count from the keyword array\r\n        // creates a dataArray used by the word cloud\r\n        function getCounts() {\r\n            kwordArr.sort();\r\n            let currentWord = null;\r\n            let cnt = 0;\r\n            for (var i = 0; i < kwordArr.length; i++) {\r\n                if (kwordArr[i] !== currentWord) {\r\n                    if (cnt > 0) {\r\n                        let word = {\r\n                            \"value\": currentWord,\r\n                            \"count\": cnt,\r\n                        }\r\n                        dataArray.push(word);\r\n                    }\r\n                    currentWord = kwordArr[i];\r\n                    cnt = 1;\r\n                } else {\r\n                    cnt++;\r\n                }\r\n            }\r\n            if (cnt > 0) {\r\n                let word = {\r\n                    \"value\": currentWord,\r\n                    \"count\": cnt,\r\n                }\r\n                dataArray.push(word);\r\n            }\r\n        }\r\n\r\n        getCounts();\r\n\r\n\r\n\r\n        // helper function to sort an array of objects by object property (ex. value: or count:)\r\n        function dynamicSort(property) {\r\n            var sortOrder = 1;\r\n            if (property[0] === \"-\") {\r\n                sortOrder = -1;\r\n                property = property.substr(1);\r\n            }\r\n            return function (a, b) {\r\n                var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\r\n                return result * sortOrder;\r\n            }\r\n        }\r\n\r\n\r\n        // because there could be thousands of keywords in a selected time\r\n        // this function will make a new dataArray with a limited number of items\r\n        let limit = 30;\r\n        dataArray.sort(dynamicSort(\"-count\"));\r\n\r\n        function limitWords() {\r\n            if (limit < dataArray.length) {\r\n                for (let i = 0; i < limit; i++) {\r\n                    dataArray2.push(dataArray[i])\r\n                }\r\n            } else {\r\n                for (let i = 0; i < dataArray.length; i++) {\r\n                    dataArray2.push(dataArray[i])\r\n                }\r\n            }\r\n        }\r\n\r\n        limitWords()\r\n\r\n        // Set color based on sentiment\r\n        switch (SELECTED_SENTIMENT) {\r\n            case \"POSITIVE\":\r\n                wordHue = 'green'\r\n                break;\r\n            case \"NEGATIVE\":\r\n                wordHue = 'red'\r\n                break;\r\n            case \"NEUTRAL\":\r\n                wordHue = 'blue'\r\n                break;\r\n            case \"\":\r\n                wordHue = 'blue'\r\n                break;\r\n        }\r\n        const options = {\r\n            luminosity: 'bright',\r\n            hue: wordHue,\r\n        }\r\n\r\n\r\n        // saves the Tag clicked by user\r\n        function saveTag(v){\r\n            sentimentTag = v;\r\n            window.alert('sentimentTag inside' + sentimentTag)\r\n            return sentimentTag;\r\n        }\r\n\r\n\r\n        //window.alert('sentimentTag outside ' + sentimentTag)\r\n\r\n        return <TagCloud\r\n            minSize={17}\r\n            maxSize={40}\r\n            shuffle={true}\r\n            tags={dataArray2}\r\n            //tags={data}\r\n            //onClick={tag => alert(`${tag.value} : ${tag.count}`)}  // onClick, onDoubleClick, onMouseMove\r\n            //onClick={tag => saveTag(`${tag.value}`)}\r\n            colorOptions={options}\r\n            style={{\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                textAlign: 'center',\r\n                fontFamily: 'sans-serif',\r\n                fontWeight: 'bold',      //bold\r\n                fontStyle: 'normal',     //italic\r\n                //padding: 5,              //Padding between tags (px)\r\n                width: '100%',\r\n                height: '100%'\r\n            }}\r\n        />\r\n    } else {\r\n        return <p style={{textAlign: 'center'}}>\r\n            No Tweets available in this time interval.\r\n        </p>\r\n    }\r\n}\r\n// , [tweetData, sentimentSelected]);\r\n//\r\n//     return <React.Fragment>\r\n//         <div className=\"WordCloud\"/>\r\n//     </React.Fragment>;\r\n// };\r\n\r\nexport default WordCloud;","import React, {useRef, useEffect, useState} from 'react';\r\nimport * as d3 from 'd3';\r\nimport rawdata from '../data/Oscars17.json';\r\n\r\nconst TimeSlider = ({height = 120, width = 670, timeSelected, tweetData, timestepSelected}) => {\r\n                    // changed height from 180\r\n\r\n    var range = [];\r\n    const SELECTED_TIMESTEP = timestepSelected;\r\n\r\n    // state and ref to svg\r\n    const svgRef = useRef();\r\n\r\n    var allRangeValues = [];\r\n    var svg;\r\n    var margin = {left: 10, right: 10};\r\n    var stroke_width = 20;\r\n    var toptext_fontsize = 24;\r\n    var sidetext_fontsize = 16;\r\n    var cutoff_char = 0;\r\n\r\n    switch (SELECTED_TIMESTEP) {\r\n        case \"minutes\":\r\n            range = [0, 60 * 24 * 4];\r\n            cutoff_char = 16;         //display like this: \"02/27/2017 23:48\"\r\n            break;\r\n        case \"hours\":\r\n            range = [0, 24 * 4];\r\n            cutoff_char = 12;         //display like this: \"02/27/2017 23:00\"\r\n            break;\r\n        case \"days\":\r\n            range = [0, 4];\r\n            cutoff_char = 9;         //display like this: \"02/27/2017\"\r\n            break;\r\n    }\r\n\r\n    // called only on first mount to fetch data and set it to state\r\n    useEffect(() => {\r\n\r\n        for (let k = 0; k < 4; k++) {\r\n            for (let j = 0; j < 24; j++) {\r\n                for (let i = 0; i < 60; i++) {\r\n                    allRangeValues[(k * 24 + j) * 60 + i] = (k < 2 ? \"02/\" + (27 + k) : \"03/0\" + (-1 + k)) + \"/2017 \" + (j < 10 ? \"0\" : \"\") + j + \":\" + (i < 10 ? \"0\" : \"\") + i + \":00\";\r\n                }\r\n            }\r\n        }\r\n\r\n        var rangeValues = [];\r\n\r\n        switch (SELECTED_TIMESTEP) {\r\n            case \"minutes\":\r\n                range = [0, 60 * 24 * 4];\r\n                cutoff_char = 16;         //display like this: \"02/27/2017 23:48\"\r\n                break;\r\n            case \"hours\":\r\n                range = [0, 24 * 4];\r\n                cutoff_char = 13;         //display like this: \"02/27/2017 23:00\"\r\n                break;\r\n            case \"days\":\r\n                range = [0, 4];\r\n                cutoff_char = 10;         //display like this: \"02/27/2017\"\r\n                break;\r\n        }\r\n\r\n        for (let i = 0; i < range[1]; i++) {\r\n            rangeValues[i] = allRangeValues[i * (allRangeValues.length / range[1])];\r\n        }\r\n\r\n        d3.selectAll('.timeslider').remove();\r\n\r\n        // append svg\r\n        svg = d3.select(svgRef.current)\r\n            .append(\"svg\")\r\n            .attr('class', 'timeslider')\r\n            .attr(\"height\", height)\r\n            .attr(\"width\", width);\r\n\r\n        let slider = svg.append('g')\r\n            .classed('slider', true)\r\n            .attr('transform', 'translate(' + margin.left + ', ' + (height / 2) + ')');\r\n\r\n        // using clamp here to avoid slider exceeding the range limits\r\n        var xScale = d3.scaleLinear()\r\n            .domain(range)\r\n            .range([0, width - margin.left - margin.right])\r\n            .clamp(true);\r\n\r\n        var xAxis = d3.axisBottom(xScale).tickValues(rangeValues).tickFormat(function (d) {\r\n            return d;\r\n        });\r\n\r\n        // main bar with a stroke\r\n        var track = slider.append('line').attr('class', 'track')\r\n            .attr('x1', xScale.range()[0])\r\n            .attr('x2', xScale.range()[1]);\r\n\r\n        // bar that's inside the main track to make it look like a rect with a border\r\n        d3.select(slider.node().appendChild(track.node().cloneNode())).attr('class', 'track-inset')\r\n            .attr('stroke', 'rgba(101, 101, 108, 0.4)')\r\n            .attr('stroke-width', 5)\r\n            .attr('stroke-linecap', 'round');\r\n\r\n        const text = svg.append('text')\r\n            .attr('class', 'label')\r\n            .attr('x', width / 2)\r\n            .attr('y', height / 4)  // changed from 3 to raise the text a little\r\n            .attr('font-size', toptext_fontsize)\r\n            .attr('font-weight', 'bold')\r\n            .attr('text-anchor', 'middle');\r\n\r\n        svg.append('title').text('timezone UTC-5');\r\n\r\n        const start = svg.append(\"text\")\r\n            .attr('x', margin.left)\r\n            .attr('y', 2 * height/2.7)\r\n            .attr('font-size', sidetext_fontsize)\r\n            .attr('font-width', 'bold')\r\n            .attr('text-anchor', 'start')\r\n            .text(rangeValues[0].substring(0, cutoff_char) + (cutoff_char === 13 ? \":00\" : \"\"));\r\n\r\n        const end = svg.append(\"text\")\r\n            .attr('x', width - margin.right)\r\n            .attr('y', 2 * height/2.7)\r\n            .attr('font-size', sidetext_fontsize)\r\n            .attr('font-width', 'bold')\r\n            .attr('text-anchor', 'end')\r\n            .text(rangeValues[rangeValues.length - 1].substring(0, cutoff_char) + (cutoff_char === 13 ? \":00\" : \"\"));\r\n\r\n\r\n        // drag handle\r\n        var handle = slider.append('circle').classed('handle', true)\r\n            .attr('r', stroke_width / 2)\r\n            .attr('fill', '#c3e6fc')\r\n            .attr('stroke', '#1da1f2');\r\n\r\n        // bar on top with stroke = transparent and on which the drag behaviour is actually called\r\n        d3.select(slider.node().appendChild(track.node().cloneNode())).attr('class', 'track-overlay')\r\n            .attr(\"stroke\", \"#e73a4e\")\r\n            .attr(\"stroke-width\", 15)\r\n            .attr(\"stroke-opacity\", 0)\r\n            .attr(\"cursor\", \"grab\")\r\n            .attr('stroke-linecap', 'round');\r\n\r\n        // create drag handler function\r\n        var dragHandler = d3.drag().on(\"drag\", (event) => {\r\n            dragged(event.x);\r\n        }).on(\"start\", event => {\r\n            dragged(event.x);\r\n        });\r\n\r\n        // attach the drag handler to the track overlay\r\n        dragHandler(slider.select(\".track-overlay\"));\r\n\r\n        // set default year to max value, corresponds to 27/02/2017 23:59:00\r\n        dragged(170, range);\r\n\r\n        function dragged(value) {\r\n\r\n            var x = xScale.invert(value),\r\n                index = 0,\r\n                timeSliderValue;\r\n\r\n            // if step has a value, compute the midpoint based on range values and reposition the slider based on the mouse position\r\n            for (var i = 0; i < range[1]; i++) {\r\n                if (x >= i && x <= i + 1) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            timeSliderValue = rangeValues[index];\r\n\r\n            if (handle.attr('cx') !== xScale(x)) {\r\n                timeSelected(timeSliderValue);\r\n                fetchData(timeSliderValue);\r\n            }\r\n            handle.attr('cx', xScale(x));\r\n            d3.selectAll('.label').text(rangeValues[index].substring(0, cutoff_char) + (cutoff_char === 13 ? \":00\" : \"\"));\r\n\r\n        }\r\n\r\n        function fetchData(timeSliderValue){\r\n\r\n            var tweets = [];\r\n\r\n            var string_timestep;\r\n\r\n            switch (SELECTED_TIMESTEP) {\r\n                case \"days\":\r\n                    string_timestep = 12;\r\n                    break;\r\n                case \"hours\":\r\n                    string_timestep = 15;\r\n                    break;\r\n                case \"minutes\":\r\n                    string_timestep = 18;\r\n                    break;\r\n            }\r\n\r\n            var SELECTED_TIME = timeSliderValue.substring(0, string_timestep - 2);\r\n\r\n            for (let i = 0; i < rawdata.length; i++) {\r\n\r\n                var timestamp = rawdata[i].Date.substring(0, string_timestep - 2);\r\n\r\n                if (timestamp === SELECTED_TIME) {\r\n                    tweets.push(rawdata[i]);\r\n                }\r\n            }\r\n\r\n            tweetData(tweets);\r\n\r\n        }\r\n\r\n    }, [SELECTED_TIMESTEP]);\r\n\r\n\r\n    return <div className=\"TimeSlider\" ref={svgRef} height={height} width={width}/>;\r\n};\r\n\r\nexport default TimeSlider;\r\n","import React, {useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst BarChart = ({height = 300, width = 670, timeSelected, tweetData, timestepSelected}) => {\r\n    // changed height from 230\r\n\r\n    // state and ref to svg\r\n    const svgRef = useRef();\r\n\r\n    // code runs only if data has been fetched\r\n    useEffect(() => {\r\n\r\n        // data processing\r\n        var tweets = new Map([]);\r\n\r\n        const SELECTED_TIMESTEP = timestepSelected;\r\n        const timeSelected_complete = timeSelected.toString();\r\n\r\n        var string_timestep;\r\n        var time_units;\r\n\r\n        var days = false;\r\n        var hours = false;\r\n        var minute = false;\r\n\r\n        switch (SELECTED_TIMESTEP) {\r\n            case \"days\":\r\n                string_timestep = 12;\r\n                time_units = 24;\r\n                days = true;\r\n                break;\r\n            case \"hours\":\r\n                string_timestep = 15;\r\n                time_units = 60;\r\n                hours = true;\r\n                break;\r\n            case \"minutes\":\r\n                string_timestep = 18;\r\n                time_units = 60;\r\n                minute = true;\r\n                break;\r\n        }\r\n\r\n        var SELECTED_TIME = timeSelected_complete.substring(0, string_timestep - 2);\r\n\r\n        for (let i = 0; i < tweetData.length; i++) {\r\n\r\n            var current_timestamp = tweetData[i].Date.substring(0, string_timestep + 1);\r\n\r\n            if (tweets.has(current_timestamp)) {\r\n                var current_tweetcount = tweets.get(current_timestamp);\r\n                tweets.set(current_timestamp, current_tweetcount + 1);\r\n            } else {\r\n                tweets.set(current_timestamp, 1);\r\n            }\r\n\r\n        }\r\n\r\n        // data preparation, fill in the empty slots\r\n        if (tweets.size < time_units) {\r\n            for (let i = time_units - 1; i >= 0; i--) {\r\n                var current_timeslot = SELECTED_TIME + (days ? \" \" : \":\") + (i < 10 ? \"0\" + i : i);\r\n                if (!tweets.has(current_timeslot)) {\r\n                    tweets.set(current_timeslot, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        const svg = d3.select(svgRef.current)\r\n            .attr('width', width)\r\n            .attr('height', height);\r\n\r\n        svg.selectAll('text').remove();\r\n        svg.selectAll('rect').remove();\r\n        svg.selectAll('line').remove();\r\n\r\n        var barchart_height = height - 20;\r\n        var fontsize = 12;\r\n        var space_between_bars = 4;\r\n        var wide_space_between_bars = 2 * space_between_bars;\r\n        var bar_width = (width - ((days ? 24 / 3 : 60 / 5) * wide_space_between_bars)\r\n            - ((days ? 24 : 60) * space_between_bars) - (25))\r\n            / ((days ? 24 : 60));\r\n        var max_tweets = 0;\r\n        var min_tweets = 30000;\r\n        var tweetArray = Array.from(tweets.values());\r\n\r\n        for (let i = 0; i < tweetArray.length; i++) {\r\n            if (tweetArray[i] < min_tweets) {\r\n                min_tweets = tweetArray[i];\r\n            }\r\n            if (tweetArray[i] > max_tweets) {\r\n                max_tweets = tweetArray[i];\r\n            }\r\n        }\r\n\r\n        var x = 25;\r\n        for (let i = 0; i < tweets.size; i++, x += (space_between_bars + bar_width)) {\r\n\r\n            if ((days && i % 3 === 0) || (!days && i % 5 === 0)) {\r\n                x += wide_space_between_bars;\r\n            }\r\n            var index = SELECTED_TIME + (days ? \" \" : \":\") + (i < 10 ? \"0\" + i : i);\r\n            current_tweetcount = tweets.get(index);\r\n            var bar_height = ((current_tweetcount - min_tweets) / (max_tweets - min_tweets)) * barchart_height;\r\n            if (Number.isNaN(bar_height)){  // this fixes the weird NaN error\r\n                bar_height = 0;\r\n            }\r\n\r\n            // bars\r\n            svg.append('rect')\r\n                .attr('x', x)\r\n                .attr('y', (barchart_height - bar_height))\r\n                .attr('width', bar_width)\r\n                .attr('height', bar_height)\r\n                .attr('fill', '#1da1f2')\r\n                .append('title')\r\n                .text(current_tweetcount + \" tweets\");\r\n\r\n            // times\r\n            svg.append('text')\r\n                .attr('x', x + (bar_width / 2))\r\n                .attr('y', height - fontsize/2)\r\n                .attr('font-size', fontsize)\r\n                .attr('font-weight', 'bold')\r\n                .attr('text-anchor', 'middle')\r\n                .text(function (d) {\r\n                    // returns :second for minutes\r\n                    //          hour:minute for hours\r\n                    //   and    hour:00 for days\r\n                    if (days && i % 3 === 0){\r\n                        return i + \":00\";\r\n                    } else if (!days && i % 5 === 0) {\r\n                        if  (minute){\r\n                            return \":\" + i;\r\n                        } else {\r\n                            return SELECTED_TIME.substring(SELECTED_TIME.length - 2, SELECTED_TIME.length) + \":\" + (i < 10 ? (\"0\" + i) : i);\r\n                        }\r\n                    }\r\n                    return \"\";\r\n                });\r\n        }\r\n\r\n        // scale\r\n        var line_step = 50;\r\n        if (max_tweets > 5000) {\r\n            line_step = 1000;\r\n        } else if (max_tweets > 2500) {\r\n            line_step = 500;\r\n        } else if (max_tweets > 1000) {\r\n            line_step = 100;\r\n        } else if (max_tweets > 100) {\r\n            line_step = 25;\r\n        } else if (max_tweets > 50) {\r\n            line_step = 10;\r\n        } else if (max_tweets > 25) {\r\n            line_step = 5;\r\n        } else {\r\n            line_step = 2;\r\n        }\r\n\r\n        var partition = Math.ceil(max_tweets / line_step);\r\n        var line_height = (line_step * barchart_height) / max_tweets;\r\n        for (let i = 1; i <= partition; i++) {\r\n\r\n            svg.append('line')\r\n                .attr('x1', 0)\r\n                .attr('x2', width)\r\n                .attr('y1', barchart_height - ((partition - i) * line_height))\r\n                .attr('y2', barchart_height - ((partition - i) * line_height))\r\n                .style('stroke-dasharray', '3,3')//dashed array for line\r\n                .style('stroke', 'dimgrey');\r\n\r\n            svg.append('text')\r\n                .attr('x', 0)\r\n                .attr('y', barchart_height - ((partition - i) * line_height + 2))\r\n                .attr('font-size', fontsize)\r\n                .text((partition - i) * line_step);\r\n        }\r\n\r\n\r\n        return () => {\r\n            svg.selectAll(\"svg\").exit().remove();\r\n        }\r\n\r\n\r\n    }, [timeSelected, timestepSelected]);\r\n\r\n    return <React.Fragment>\r\n        <svg className=\"BarChart\" height={height} width={width} ref={svgRef}/>\r\n    </React.Fragment>;\r\n};\r\n\r\nexport default BarChart;\r\n\r\n","import React, {useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n// time for transition between state changes in milliseconds\r\nconst transitionDuration = 100;\r\n\r\n/** PieChart component that updates everytime a prop changes with a transition animation, takes in a list of data + other optional props\r\n data prop format example: [{ label: 'FirstObj', color: 'red', value: 1 }, { label: 'SecondObj', color: 'blue', value: 1 }] */\r\nconst PieChart = ({\r\n                      width = 300, height = 300, tweetData, sentimentSelected\r\n                  }) => {\r\n\r\n    const outerRadius = 110;\r\n    const innerRadius = outerRadius / 2.5; // 3\r\n    const fontsize = 16;\r\n    const center_fontsize = 14;\r\n    var isSentimentSelected = false;\r\n\r\n    const svgRef = useRef();\r\n    const didMount = useRef(false);\r\n\r\n    var pie = d3.pie().sort(null).value((d) => d.value);\r\n    var arc = d3.arc()\r\n        .innerRadius(innerRadius)\r\n        .outerRadius(outerRadius);\r\n\r\n    var data;\r\n    var positive_counter = 0;\r\n    var neutral_counter = 0;\r\n    var negative_counter = 0;\r\n    var tweetCount = tweetData.length;\r\n\r\n    useEffect(() => {\r\n\r\n        // data preparation\r\n        for (let i = 0; i < tweetCount; i++) {\r\n            var currentSentiment = tweetData[i].Sentiment_Type;\r\n            switch (currentSentiment) {\r\n                case \"POSITIVE\":\r\n                    positive_counter++;\r\n                    break;\r\n                case \"NEUTRAL\":\r\n                    neutral_counter++;\r\n                    break;\r\n                case \"NEGATIVE\":\r\n                    negative_counter++;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        data = [\r\n            {\r\n                label: \"positive\",\r\n                value: positive_counter,\r\n                color: 'lightgreen',\r\n                fractional: (Math.round((positive_counter / tweetCount) * 100)) + '%'\r\n            },\r\n            {\r\n                label: \"neutral\",\r\n                value: neutral_counter,\r\n                color: 'floralwhite',\r\n                fractional: (Math.round((neutral_counter / tweetCount) * 100)) + '%'\r\n            },\r\n            {\r\n                label: \"negative\",\r\n                value: negative_counter,\r\n                color: 'lightcoral',\r\n                fractional: (Math.round((negative_counter / tweetCount) * 100)) + '%'\r\n            }\r\n        ];\r\n\r\n        setupContainersOnMount();\r\n        drawPieChart();\r\n        addTextInCenter();\r\n\r\n        d3.selectAll('.top_text')\r\n            .text('Sentiment Distribution of ' + tweetCount + ' Tweets');\r\n\r\n        didMount.current = true;\r\n\r\n\r\n        //----- FUNCTION DEFINITIONS -------------------------------------------------------------------------//\r\n        function setupContainersOnMount() {\r\n            const svg = d3.select(svgRef.current);\r\n\r\n            if (!didMount.current) {\r\n                let canvas = svg\r\n                    .append(\"svg\")\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", height)\r\n                    .classed('piechart_outer_svg', true)\r\n                    .append('g')\r\n                    .attr('transform', 'translate(' + height / 2 + ' ' + width / 2 + ')')\r\n                    .classed('piechart_canvas', true)\r\n                    .style('cursor', 'pointer')\r\n                addTextAtTop();\r\n\r\n                // container for arcs\r\n                canvas.append('g').classed('arcs', true);\r\n            }\r\n        }\r\n\r\n        /** uses enter() and exit() to redraw the piechart every time props change with transitions */\r\n        function drawPieChart() {\r\n            var arcs = d3.select('.arcs').selectAll(\"path\").data(pie(data));\r\n\r\n            // transition arcs when data changes\r\n            arcs.transition().duration(transitionDuration).attrTween(\"d\", arcTween);\r\n\r\n            // enter\r\n            var enter = arcs.enter()\r\n                .append(\"path\")\r\n                .attr(\"class\", \"arc\")\r\n                .attr(\"d\", arc)\r\n                .each(function (d) {\r\n                    this._current = d;\r\n                })\r\n                .attr(\"fill\", function (d) {\r\n                    return d.data.color;\r\n                })\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"opacity\", 1.0)\r\n                .attr(\"stroke-opacity\", 0.1)\r\n                .attr(\"stroke-width\", \"3px\")\r\n                .each(function (d) {\r\n                    this._current = d;\r\n                })\r\n                .on('mouseenter', function (event, d) {\r\n                    if (!isSentimentSelected) {\r\n                        d3.selectAll('.arc').attr(\"opacity\", 0.3);  // changed from 0.5\r\n                        d3.select(this)\r\n                            .attr(\"opacity\", 1.0);\r\n\r\n                        d3.selectAll('.center_text')\r\n                            .text(d.data.fractional + \" \" + d.data.label);\r\n                    }\r\n                })\r\n                .on('mouseleave', function (d) {\r\n                    if (!isSentimentSelected) {\r\n                        d3.selectAll('.arc').attr(\"opacity\", 1.0);\r\n                        d3.selectAll('.center_text')\r\n                            .text(\"\");\r\n                    }\r\n                })\r\n                .on('click', function (event, d) {\r\n                    if (!isSentimentSelected){\r\n                        d3.selectAll('.arc').attr(\"opacity\", 0.3);\r\n                        d3.select(this)\r\n                            .attr(\"opacity\", 1.0);\r\n\r\n                        d3.selectAll('.center_text')\r\n                            .text(d.data.fractional + \" \" + d.data.label);\r\n                        sentimentSelected(d.data.label);\r\n                        isSentimentSelected = true;\r\n                    } else {\r\n                        isSentimentSelected = false;\r\n                    }\r\n                })\r\n                .append('title')\r\n\r\n            // update tooltip\r\n            arcs.select(\"title\").text(function(d) {return d.value + \" tweets\";});\r\n\r\n            // exit\r\n            arcs.exit().remove();\r\n\r\n        }\r\n\r\n        function addTextAtTop() {\r\n            let top_text = d3.select('.piechart_outer_svg')\r\n                .selectAll('.top_text')\r\n                .data([0], (d) => d);\r\n\r\n            // adds the top text only when mounting\r\n            top_text\r\n                .enter().append('text')\r\n                .attr('x', width / 2)\r\n                .attr('y', (height - 2 * outerRadius) / 2.7 - fontsize)\r\n                .attr('class', 'top_text')\r\n                .style('text-anchor', 'middle')\r\n                .style('font-size', fontsize)\r\n                .text(\"\");\r\n\r\n            top_text.exit().remove();\r\n        }\r\n\r\n        function addTextInCenter() {\r\n            let center_text = d3.select('.piechart_outer_svg')\r\n                .selectAll('.center_text')\r\n                .data([0], (d) => d);\r\n\r\n            // adds the center text only when mounting\r\n            center_text\r\n                .enter().append('text')\r\n                .attr('x', width / 2)\r\n                .attr('y', height / 2 + center_fontsize / 2)\r\n                .attr('class', 'center_text')\r\n                .style('text-anchor', 'middle')\r\n                .style('font-size', center_fontsize)\r\n                .text(\"\");\r\n\r\n            center_text.exit().remove();\r\n        }\r\n\r\n        // used to interpolate between start and end angle when transitioning\r\n        function arcTween(a) {\r\n            var i = d3.interpolate(this._current, a);\r\n            this._current = i(0);\r\n            return function (t) {\r\n                return arc(i(t));\r\n            };\r\n        }\r\n\r\n    }, [tweetData]);\r\n\r\n    return <React.Fragment>\r\n        <div className=\"PieChart\" ref={svgRef}/>\r\n    </React.Fragment>;\r\n};\r\n\r\nexport default PieChart;\r\n","import React, {useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst TweetView = ({tweetData, sentimentSelected, tweetAmountShown, tagSelected}) => {\r\n\r\n    const divRef = useRef();\r\n    var didMount = useRef(false);\r\n\r\n    const SELECTED_SENTIMENT = sentimentSelected.toString().toUpperCase();\r\n    const displayTweetAmount = tweetAmountShown; //TODO: display and add the amount\r\n    // shown to the div in form of \"showing X tweets with _____ sentiment\"\r\n    // TODO: sort by number of likes or retweets\r\n    // https://stackoverflow.com/questions/31158902/is-it-possible-to-sort-a-es6-map-object\r\n\r\n    const SELECTED_TAG = tagSelected;\r\n    //window.alert(SELECTED_TAG);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // data preparation\r\n        var currentSentimentTweets = [];\r\n\r\n        for (let i = 0; i < tweetData.length; i++) {\r\n            var currentSentiment = tweetData[i].Sentiment_Type;\r\n            var currentTweet = tweetData[i];\r\n            if (currentSentiment === SELECTED_SENTIMENT) {\r\n                currentSentimentTweets.push(currentTweet);\r\n            }\r\n        }\r\n\r\n        var currentSentimentTweets2 = [];\r\n        // if SELECTED_TAG not empty\r\n        if (SELECTED_TAG) {\r\n            // if keywords not empty\r\n            for (let i = 0; i < currentSentimentTweets.length; i++) {\r\n                if (currentSentimentTweets[i].Keywords) {\r\n                    var strA = currentSentimentTweets[i].Keywords;\r\n                    var arrayA = strA.split(\",\");\r\n                    for (let j = 0; j < arrayA.length; j++) {\r\n                        if (SELECTED_TAG == arrayA[j]) {\r\n                            currentSentimentTweets2.push(currentSentimentTweets[i]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            for (let i = 0; i < currentSentimentTweets.length; i++) {\r\n                currentSentimentTweets2.push(currentSentimentTweets[i]);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        const margin = {side: 5, top: 5, preview: 10}\r\n\r\n        var div;\r\n        var tweetview_group\r\n        var svg_height = 500;\r\n        var svg_width = 490;\r\n        var preview_fontsize = 14;\r\n        var preview_fav_fontsize = 10;\r\n        var preview_height = 100 + 2 * margin.side;\r\n        var preview_width = svg_width + 2 * margin.side;\r\n        var container_height = preview_height - 2 * margin.side;\r\n        var container_width = preview_width - 2 * margin.side;\r\n\r\n        d3.selectAll('.tweetview_group').remove();\r\n\r\n        div = d3.select(divRef.current)\r\n            .attr('width', svg_width)\r\n            .attr('height', svg_height)\r\n\r\n        tweetview_group = div.append('g').attr('class', 'tweetview_group');\r\n\r\n        for (let i = 0; i < displayTweetAmount; i++) {\r\n\r\n            console.log(\"Hello\")\r\n\r\n            // tweet preview\r\n            var tweetview = tweetview_group.append('svg')\r\n                .attr('class', 'tweetview' + i)\r\n                .attr('x', 0)\r\n                .attr('y', 0)\r\n                .attr('width', preview_width)\r\n                .attr('height', preview_height);\r\n\r\n            var tweetcontainer = tweetview.append('rect')\r\n                .attr('class', 'tweetpreview_container' + i)\r\n                .attr('width', container_width)\r\n                .attr('height', container_height)\r\n                .attr('x', margin.side)\r\n                .attr('y', margin.top)\r\n                .attr('rx', 10)\r\n                .attr('ry', 10);\r\n\r\n            var tweetFullname = tweetview.append('text')\r\n                .attr('class', 'tweetpreview_fullname' + i)\r\n                .attr('x', margin.preview)\r\n                .attr('y', (margin.preview + preview_fontsize))\r\n                .attr('font-size', preview_fontsize)\r\n                .attr('font-weight', 'bold')\r\n                .style('text-anchor', 'start');\r\n\r\n            var tweetScreenname = tweetview.append('text')\r\n                .attr('class', 'tweetpreview_screenname' + i)\r\n                .attr('x', margin.preview)\r\n                .attr('y', margin.preview + preview_fontsize)\r\n                .attr('font-size', preview_fontsize)\r\n                .style('text-anchor', 'start');\r\n\r\n            var tweetContent = tweetview.append('text')\r\n                .attr('class', 'tweetpreview_tweettext' + i)\r\n                .attr('x', 2 * margin.preview)\r\n                .attr('y', 2 * margin.preview + 2 * preview_fontsize)\r\n                .attr('font-size', preview_fontsize)\r\n                .style('text-anchor', 'start');\r\n\r\n            var tweetFavsAndRTs = tweetview.append('text')\r\n                .attr('class', 'tweetpreview_tweetfavs' + i)\r\n                .attr('x', container_width - margin.preview)\r\n                .attr('y', container_height - margin.preview + preview_fav_fontsize / 2)\r\n                .style('font-size', preview_fav_fontsize)\r\n                .style('text-anchor', 'end');\r\n        }\r\n\r\n\r\n        // container stroke changes on 'onclick' of the piechart and takes the color of the sentiment that is selected\r\n\r\n        switch (SELECTED_SENTIMENT) {\r\n            case \"POSITIVE\":\r\n                divRef.current.style.borderColor = 'lightgreen';\r\n                break;\r\n            case \"NEUTRAL\":\r\n                divRef.current.style.borderColor = 'floralwhite';\r\n                break;\r\n            case \"NEGATIVE\":\r\n                divRef.current.style.borderColor = 'lightcoral';\r\n                break;\r\n            default:\r\n                divRef.current.style.borderColor = 'dimgrey';\r\n                break;\r\n        }\r\n\r\n\r\n        for (let i = 0; i < displayTweetAmount; i++) {\r\n\r\n            d3.selectAll('.tweetpreview_container' + i)\r\n                .style('fill', function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        return '#1da1f211';\r\n                    }\r\n                    return 'white';\r\n                })\r\n                .style('stroke', function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        return '#1da1f2';\r\n                    }\r\n                    return 'white';\r\n                })\r\n                .style('stroke-width', 1.5);\r\n\r\n\r\n            // set onclick function of a preview that leads to the original tweet\r\n            d3.selectAll('.tweetview' + i)\r\n                .on('click', function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        var url = \"http://twitter.com/\" + tweet.Screen_Name + \"/status/\" + tweet.Tweet_ID;\r\n                        window.open(url, \"_blank\");\r\n                    }\r\n                })\r\n                .on('mouseenter', function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        d3.selectAll('.tweetpreview_container' + i).style('fill', '#1da1f255');\r\n                    }\r\n                })\r\n                .on('mouseleave', function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        d3.selectAll('.tweetpreview_container' + i).style('fill', '#1da1f211');\r\n                    }\r\n                })\r\n                .style('cursor', function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        return 'pointer';\r\n                    }\r\n                })\r\n\r\n\r\n            // set text of the tweetpreview head\r\n            d3.selectAll('.tweetpreview_fullname' + i)\r\n                .text(function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        return tweet.Full_Name + (tweet.Verified === \"Yes\" ? \" ☑\" : \"\");\r\n                    }\r\n                });\r\n\r\n            d3.selectAll('.tweetpreview_screenname' + i)\r\n                .text(function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        var string = \"\";\r\n                        for (let i = 0; i < tweet.Full_Name.length; i++) {\r\n                            string += \"\\xa0\\xa0\"\r\n                        }\r\n                        return string + tweet.Screen_Name;\r\n                    }\r\n                });\r\n\r\n            // set tweet content\r\n            d3.selectAll('.tweetpreview_tweettext' + i)\r\n                .text(function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        return tweet.Tweet_Text;//, preview_width - 2 * margin.preview);\r\n                    }\r\n                    return \"\";\r\n                })\r\n\r\n            // line break for tweet content\r\n            d3.selectAll('.tweetpreview_tweettext' + i)\r\n                .call(wrap, preview_width - 2 * margin.preview);\r\n\r\n\r\n            // set tweet favorizes and retweets\r\n            d3.selectAll('.tweetpreview_tweetfavs' + i)\r\n                .text(function () {\r\n                    var tweet = currentSentimentTweets2[i];\r\n                    if (tweet !== undefined) {\r\n                        return \"🔁 \" + tweet.Retweets + \"\\xa0\\xa0\\xa0💗‌ \" + tweet.Favorites;\r\n                    }\r\n                    return \"\";\r\n                })\r\n        }\r\n\r\n\r\n        didMount.current = true;\r\n\r\n        // function for linebreaking\r\n        // adapted from https://bl.ocks.org/mbostock/7555321\r\n        function wrap(text, width) {\r\n            text.each(function () {\r\n                var text = d3.select(this),\r\n                    words = text.text().split(/\\s+/).reverse(),\r\n                    word,\r\n                    line = [],\r\n                    lineNumber = 0,\r\n                    y = parseInt(text.attr(\"y\")),\r\n                    dy = 0,\r\n                    tspan = text.text(null).append(\"tspan\")\r\n                        .attr(\"x\", 2 * margin.preview)\r\n                        .attr(\"y\", y)\r\n                        .attr(\"dy\", dy + \"em\");\r\n                while (word = words.pop()) {\r\n                    line.push(word);\r\n                    tspan.text(line.join(\" \"));\r\n                    if (tspan.node().getComputedTextLength() > width) {\r\n                        line.pop();\r\n                        tspan.text(line.join(\" \"));\r\n                        line = [word];\r\n                        tspan = text.append(\"tspan\")\r\n                            .attr(\"x\", 2 * margin.preview)\r\n                            .attr(\"y\", parseInt(y) + ++lineNumber * (preview_fontsize + 5))\r\n                            .text(word);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n    }, [tweetData, sentimentSelected, tweetAmountShown]);\r\n\r\n    return <React.Fragment>\r\n        <div className=\"TweetView\" ref={divRef}/>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default TweetView;","import React, {useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\nimport {feature} from 'topojson'\r\nimport mappingdata from '../data/country_to_map_mapping.json';\r\n\r\nconst WorldMap = ({width = 700, height = 450, tweetData}) => {\r\n\r\n    // state and ref to svg\r\n    const svgRef = useRef();\r\n    var didMount = useRef(false);\r\n\r\n    var svg;\r\n    var projection;\r\n    var colorScale;\r\n    var pathGenerator;\r\n\r\n    var countryData = new Map([]);\r\n\r\n    // code runs only if data has been fetched\r\n    useEffect(() => {\r\n\r\n        for (let i = 0; i < tweetData.length; i++) {\r\n            var currentCountry = tweetData[i].Country.toUpperCase();\r\n            if (countryData.has(currentCountry)) {\r\n                countryData.set(currentCountry, countryData.get(currentCountry) + 1);\r\n            } else {\r\n                countryData.set(currentCountry, 1);\r\n            }\r\n        }\r\n\r\n        var max_tweets = 0;\r\n        var countryArray = Array.from(countryData.values());\r\n        for (let i = 0; i < countryArray.length; i++) {\r\n            var currentTweetcount = countryArray[i];\r\n            if (currentTweetcount > max_tweets) {\r\n                max_tweets = currentTweetcount;\r\n            }\r\n        }\r\n\r\n        svg = d3.select(svgRef.current)\r\n            .attr('width', width)\r\n            .attr('height', height)\r\n            .attr('class', 'map');\r\n\r\n        projection = d3.geoNaturalEarth1()\r\n            .scale(width / 4.5) // this parameter i really just found by trying out different values (apparently there is no way to easily compute the value one needs here)\r\n            .translate([width / 2, height / 2]);\r\n\r\n        colorScale = d3.scaleLinear()\r\n            .domain([0, max_tweets])\r\n            .range(['#ffffff', '#1da1f2'])\r\n\r\n        pathGenerator = d3.geoPath().projection(projection);\r\n\r\n        if (!didMount) {\r\n            svg.append('path')\r\n                .attr('class', 'sphere')\r\n                .attr('d', pathGenerator({type: 'Sphere'}))\r\n                .attr('fill', '#1da1f222');\r\n        }\r\n\r\n        // WHAT HAPPENED TO AFGHANISTAN AND ANGOLA????\r\n        d3.json(\"https://unpkg.com/world-atlas@1/world/110m.json\")\r\n            .then(data => {\r\n                const countries = feature(data, data.objects.countries);\r\n                svg.selectAll('path')\r\n                    .data(countries.features)\r\n                    .enter().append('path')\r\n                    .attr('d', pathGenerator)\r\n                    .attr('class', function (d) {\r\n                        for (let i = 0; i < mappingdata.length; i++) {\r\n                            if (mappingdata[i].id === d.id) {\r\n                                return mappingdata[i].country.toUpperCase();\r\n                            }\r\n                        }\r\n                        return d.id\r\n                    })\r\n                    .style('fill', function (d) {\r\n                        return 'white';\r\n                    })\r\n                    .style('stroke', 'dimgrey')\r\n                    .style('stroke-width', 0.5)\r\n                    .append('title')\r\n                    .text(function (d) {\r\n                        for (let i = 0; i < mappingdata.length; i++) {\r\n                            if (mappingdata[i].id === d.id) {\r\n                                return mappingdata[i].country.toUpperCase();\r\n                            }\r\n                        }\r\n                        return d.id\r\n                    })\r\n            });\r\n\r\n        for (let i = 0; i < mappingdata.length; i++) {\r\n\r\n            if (countryData.has(mappingdata[i].country.toUpperCase())) {\r\n                svg.selectAll('.' + mappingdata[i].country.toUpperCase())\r\n                    .style('fill', function () {\r\n                        return colorScale(countryData.get(mappingdata[i].country.toUpperCase()));\r\n                    })\r\n            }\r\n        }\r\n    }, [tweetData]);\r\n\r\n    return <React.Fragment>\r\n        <svg className=\"WorldMap\" height={height} width={width} ref={svgRef}/>\r\n    </React.Fragment>;\r\n};\r\n\r\nexport default WorldMap;","import './App.css';\r\nimport {useState} from \"react\";\r\nimport TimestepDropDown from \"./components/TimestepDropDown.js\";\r\nimport TweetviewDropDown from \"./components/TweetviewDropDown.js\";\r\nimport WordCloud from \"./components/WordCloud\";\r\nimport TimeSlider from '../src/components/TimeSlider.js';\r\nimport BarChart from './components/BarChart.js';\r\nimport PieChart from \"./components/PieChart.js\";\r\nimport TweetView from \"./components/TweetView.js\";\r\nimport WorldMap from \"./components/WorldMap.js\";\r\n\r\nimport stylesheet from './components/styles.scss';\r\nimport useDebounce from '../src/hooks/useDebounce.js';\r\n\r\nimport {FaTwitter} from 'react-icons/fa';\r\nimport {FaInfo} from 'react-icons/fa';\r\n\r\nfunction App() {\r\n\r\n    const [time, setTime] = useState(\"02/27/2017 23:48:00\");\r\n    const [tweets, setTweets] = useState([]);\r\n    const [timestep, setTimestep] = useState(\"days\");\r\n    const [sentiment, setSentiment] = useState(\"\");\r\n    const [tweetsShown, setTweetsShown] = useState(10);\r\n    const debouncedTime = useDebounce(time, 100);\r\n    const[sentimentTag, setSentimentTag] = useState(\"\");\r\n\r\n    const handleTimeSlider_Time = (time) => {\r\n        setTime(time);\r\n    };\r\n\r\n    const handleTimeSlider_Data = (tweets) => {\r\n        setTweets(tweets);\r\n    };\r\n\r\n    const handleTimestepDropDown = (timestep) => {\r\n        setTimestep(timestep);\r\n    }\r\n\r\n    const handleTweetviewDropDown = (tweetsShown) => {\r\n        setTweetsShown(tweetsShown);\r\n    }\r\n\r\n    const handlePieChart = (sentiment) => {\r\n        setSentiment(sentiment);\r\n    }\r\n\r\n    const handleSentimentTag = (sentimentTag) => {\r\n        setSentimentTag(sentimentTag);\r\n    }\r\n\r\n    return (\r\n        <div className={stylesheet}>\r\n            <h1 style={{textAlign: 'center', color: '#1da1f2'}}>\r\n                The <text className=\"clickable\" onClick={gotoIncident}>2017 Oscar Incident</text> - A Visualization of\r\n                the Twitter Data <FaTwitter className=\"clickable\" onClick={gotoTwitter}/>\r\n            </h1>\r\n            <div style={{\r\n                borderStyle: 'solid',\r\n                borderColor: '#1da1f2',\r\n                borderWidth: '5px',\r\n                borderRadius: '25px',\r\n                backgroundColor: 'white',\r\n                padding: '10px',\r\n                display: 'flex',\r\n                flexDirection: 'column'\r\n            }}>\r\n                <div style={{backgroundColor: 'white',padding: '10px',display: 'flex',  flexDirection: 'row'}}>\r\n                    <div style={{backgroundColor: 'white', width:'55%', display: 'flex',flexDirection: 'column',\r\n                        marginLeft: 'auto',\r\n                        marginRight: 'auto',\r\n                    }}>\r\n                        <p style={{textAlign: 'center', paddingTop: '6px'}}>\r\n                            Select a time interval and range to view the Tweet data for this topic!\r\n                        </p>\r\n                        <div style={{height: '50px',borderRadius: '25px',padding: '10px',textAlign: 'center', }}>\r\n                            <TimestepDropDown timestepSelected={handleTimestepDropDown}/>\r\n                        </div>\r\n                        <div style={{paddingTop: '20px', padding: '10px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                            <BarChart timeSelected={debouncedTime} tweetData={tweets} timestepSelected={timestep}/>\r\n                        </div>\r\n                        <div style={{backgroundColor: 'white', paddingTop: '30px', paddingBottom: '50px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                            <TimeSlider timeSelected={handleTimeSlider_Time} tweetData={handleTimeSlider_Data}\r\n                                        timestepSelected={timestep}/>\r\n                        </div>\r\n                        <div style={{borderRadius: '25px', backgroundColor: 'white', paddingTop: '10px', margin: 'auto'}}>\r\n                            <WorldMap tweetData={tweets}/>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{backgroundColor: \"white\", width: '45%', display: 'flex', flexDirection: 'column', padding: '10px', paddingLeft:'30px', marginLeft: 'auto', marginRight: 'auto'}}>\r\n                        <div style={{backgroundColor: 'white', marginLeft: 'auto', marginRight: 'auto', paddingLeft: '10', paddingTop: '17px'}}>\r\n                            <PieChart tweetData={tweets} sentimentSelected={handlePieChart}/>\r\n                        </div>\r\n                        <div style={{backgroundColor:'white', paddingTop: '45px', width: '570px', height: '270px',  alignItems: 'center', margin: 'auto', overflowY: 'hidden'}}>\r\n                            <WordCloud tweetData={tweets} sentimentSelected={sentiment}/>\r\n                        </div>\r\n                        <div style={{backgroundColor:'white', display: 'flex', flexDirection: 'row',marginLeft: 'auto', marginRight: 'auto', paddingTop: '10px'}}>\r\n                            <p>Choose the amount of tweets shown:</p>\r\n                            <div style={{paddingTop: '15px'}}>\r\n                                <TweetviewDropDown tweetAmountShown={handleTweetviewDropDown}/>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{backgroundColor:'white', paddingTop: '10px', marginLeft: 'auto', marginRight: 'auto', justifyContent: 'center'}}>\r\n                            <TweetView id=\"tweetpreviewcontainer\" tweetData={tweets} sentimentSelected={sentiment}\r\n                                       tweetAmountShown={tweetsShown} tagSelected={sentimentTag}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'bottom'}}>\r\n                <FaInfo style={{color: '#1da1f2', fontSize: 20, paddingTop: '5px'}}/>\r\n                <p style={{textAlign: 'center', fontSize: 13}}>\r\n                    The visualization shows data from tweets published in the timeframe of 28th of February to 3rd of\r\n                    March 2017 with the Hashtag #Oscars. This timeframe starts after the 89th Academy Awards, where the\r\n                    movie La La Land was wrongfully announced as the winner for Best Picture instead of the real winner\r\n                    Moonlight.\r\n                    <p style={{color: \"lightgrey\"}}>\r\n                        created by Hannah Clara Bayat and Joanna Zamiechowska <br/>\r\n                        Visualization 2 - TU Wien, 2021\r\n                    </p>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction gotoTwitter() {\r\n    window.open('https://twitter.com', '_blank');\r\n}\r\n\r\nfunction gotoIncident() {\r\n    window.open('https://www.youtube.com/watch?v=GCQn_FkFElI', '_blank');\r\n}\r\n\r\nexport default App;","import { useState, useEffect } from 'react';\r\n\r\n// Hook\r\nexport default function useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Update debounced value after delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n\r\n            // Cancel the timeout if value changes (also on delay change or unmount)\r\n            // This is how we prevent debounced value from updating if value is changed ...\r\n            // .. within the delay period. Timeout gets cleared and restarted.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n\r\n    return debouncedValue;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}